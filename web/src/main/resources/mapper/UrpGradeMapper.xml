<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hackerda.platform.mapper.UrpGradeMapper" >
  <resultMap id="BaseResultMap" type="com.hackerda.platform.pojo.UrpGrade" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="exam_id" property="examId" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="INTEGER" />
    <result column="score" property="score" jdbcType="DOUBLE" />
    <result column="grade_point" property="gradePoint" jdbcType="DOUBLE" />
    <result column="level_name" property="levelName" jdbcType="VARCHAR" />
    <result column="level_point" property="levelPoint" jdbcType="VARCHAR" />
    <result column="rank" property="rank" jdbcType="INTEGER" />
    <result column="unpassed_reason_code" property="unpassedReasonCode" jdbcType="VARCHAR" />
    <result column="unpassed_reason_explain" property="unpassedReasonExplain" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="replace_course_number" property="replaceCourseNumber" jdbcType="VARCHAR" />
    <result column="retake_course_mark" property="retakeCourseMark" jdbcType="VARCHAR" />
    <result column="retakeCourse_mode_code" property="retakecourseModeCode" jdbcType="VARCHAR" />
    <result column="retake_course_mode_explain" property="retakeCourseModeExplain" jdbcType="VARCHAR" />
    <result column="standard_point" property="standardPoint" jdbcType="VARCHAR" />
    <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, exam_id, account, score, grade_point, level_name, level_point, rank, unpassed_reason_code,
    unpassed_reason_explain, remark, replace_course_number, retake_course_mark, retakeCourse_mode_code,
    retake_course_mode_explain, standard_point, gmt_create
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hackerda.platform.pojo.example.UrpGradeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from urp_grade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from urp_grade
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from urp_grade
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hackerda.platform.pojo.example.UrpGradeExample" >
    delete from urp_grade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hackerda.platform.pojo.UrpGrade" >
    insert into urp_grade (id, exam_id, account,
    score, grade_point, level_name,
    level_point, rank, unpassed_reason_code,
    unpassed_reason_explain, remark, replace_course_number,
    retake_course_mark, retakeCourse_mode_code,
    retake_course_mode_explain, standard_point,
    gmt_create)
    values (#{id,jdbcType=INTEGER}, #{examId,jdbcType=INTEGER}, #{account,jdbcType=INTEGER},
    #{score,jdbcType=DOUBLE}, #{gradePoint,jdbcType=DOUBLE}, #{levelName,jdbcType=VARCHAR},
    #{levelPoint,jdbcType=VARCHAR}, #{rank,jdbcType=INTEGER}, #{unpassedReasonCode,jdbcType=VARCHAR},
    #{unpassedReasonExplain,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{replaceCourseNumber,jdbcType=VARCHAR},
    #{retakeCourseMark,jdbcType=VARCHAR}, #{retakecourseModeCode,jdbcType=VARCHAR},
    #{retakeCourseModeExplain,jdbcType=VARCHAR}, #{standardPoint,jdbcType=VARCHAR},
    #{gmtCreate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.hackerda.platform.pojo.UrpGrade" >
    <selectKey order="AFTER" keyProperty="id" resultType="int">
      select LAST_INSERT_ID();
    </selectKey>
    insert into urp_grade
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="examId != null" >
        exam_id,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="gradePoint != null" >
        grade_point,
      </if>
      <if test="levelName != null" >
        level_name,
      </if>
      <if test="levelPoint != null" >
        level_point,
      </if>
      <if test="rank != null" >
        rank,
      </if>
      <if test="unpassedReasonCode != null" >
        unpassed_reason_code,
      </if>
      <if test="unpassedReasonExplain != null" >
        unpassed_reason_explain,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="replaceCourseNumber != null" >
        replace_course_number,
      </if>
      <if test="retakeCourseMark != null" >
        retake_course_mark,
      </if>
      <if test="retakecourseModeCode != null" >
        retakeCourse_mode_code,
      </if>
      <if test="retakeCourseModeExplain != null" >
        retake_course_mode_explain,
      </if>
      <if test="standardPoint != null" >
        standard_point,
      </if>
      <if test="gmtCreate != null" >
        gmt_create,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="examId != null" >
        #{examId,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        #{score,jdbcType=DOUBLE},
      </if>
      <if test="gradePoint != null" >
        #{gradePoint,jdbcType=DOUBLE},
      </if>
      <if test="levelName != null" >
        #{levelName,jdbcType=VARCHAR},
      </if>
      <if test="levelPoint != null" >
        #{levelPoint,jdbcType=VARCHAR},
      </if>
      <if test="rank != null" >
        #{rank,jdbcType=INTEGER},
      </if>
      <if test="unpassedReasonCode != null" >
        #{unpassedReasonCode,jdbcType=VARCHAR},
      </if>
      <if test="unpassedReasonExplain != null" >
        #{unpassedReasonExplain,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="replaceCourseNumber != null" >
        #{replaceCourseNumber,jdbcType=VARCHAR},
      </if>
      <if test="retakeCourseMark != null" >
        #{retakeCourseMark,jdbcType=VARCHAR},
      </if>
      <if test="retakecourseModeCode != null" >
        #{retakecourseModeCode,jdbcType=VARCHAR},
      </if>
      <if test="retakeCourseModeExplain != null" >
        #{retakeCourseModeExplain,jdbcType=VARCHAR},
      </if>
      <if test="standardPoint != null" >
        #{standardPoint,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null" >
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hackerda.platform.pojo.example.UrpGradeExample" resultType="java.lang.Integer" >
    select count(*) from urp_grade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update urp_grade
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.examId != null" >
        exam_id = #{record.examId,jdbcType=INTEGER},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=INTEGER},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=DOUBLE},
      </if>
      <if test="record.gradePoint != null" >
        grade_point = #{record.gradePoint,jdbcType=DOUBLE},
      </if>
      <if test="record.levelName != null" >
        level_name = #{record.levelName,jdbcType=VARCHAR},
      </if>
      <if test="record.levelPoint != null" >
        level_point = #{record.levelPoint,jdbcType=VARCHAR},
      </if>
      <if test="record.rank != null" >
        rank = #{record.rank,jdbcType=INTEGER},
      </if>
      <if test="record.unpassedReasonCode != null" >
        unpassed_reason_code = #{record.unpassedReasonCode,jdbcType=VARCHAR},
      </if>
      <if test="record.unpassedReasonExplain != null" >
        unpassed_reason_explain = #{record.unpassedReasonExplain,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.replaceCourseNumber != null" >
        replace_course_number = #{record.replaceCourseNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.retakeCourseMark != null" >
        retake_course_mark = #{record.retakeCourseMark,jdbcType=VARCHAR},
      </if>
      <if test="record.retakecourseModeCode != null" >
        retakeCourse_mode_code = #{record.retakecourseModeCode,jdbcType=VARCHAR},
      </if>
      <if test="record.retakeCourseModeExplain != null" >
        retake_course_mode_explain = #{record.retakeCourseModeExplain,jdbcType=VARCHAR},
      </if>
      <if test="record.standardPoint != null" >
        standard_point = #{record.standardPoint,jdbcType=VARCHAR},
      </if>
      <if test="record.gmtCreate != null" >
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update urp_grade
    set id = #{record.id,jdbcType=INTEGER},
    exam_id = #{record.examId,jdbcType=INTEGER},
    account = #{record.account,jdbcType=INTEGER},
    score = #{record.score,jdbcType=DOUBLE},
    grade_point = #{record.gradePoint,jdbcType=DOUBLE},
    level_name = #{record.levelName,jdbcType=VARCHAR},
    level_point = #{record.levelPoint,jdbcType=VARCHAR},
    rank = #{record.rank,jdbcType=INTEGER},
    unpassed_reason_code = #{record.unpassedReasonCode,jdbcType=VARCHAR},
    unpassed_reason_explain = #{record.unpassedReasonExplain,jdbcType=VARCHAR},
    remark = #{record.remark,jdbcType=VARCHAR},
    replace_course_number = #{record.replaceCourseNumber,jdbcType=VARCHAR},
    retake_course_mark = #{record.retakeCourseMark,jdbcType=VARCHAR},
    retakeCourse_mode_code = #{record.retakecourseModeCode,jdbcType=VARCHAR},
    retake_course_mode_explain = #{record.retakeCourseModeExplain,jdbcType=VARCHAR},
    standard_point = #{record.standardPoint,jdbcType=VARCHAR},
    gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hackerda.platform.pojo.UrpGrade" >
    update urp_grade
    <set >
      <if test="examId != null" >
        exam_id = #{examId,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=INTEGER},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=DOUBLE},
      </if>
      <if test="gradePoint != null" >
        grade_point = #{gradePoint,jdbcType=DOUBLE},
      </if>
      <if test="levelName != null" >
        level_name = #{levelName,jdbcType=VARCHAR},
      </if>
      <if test="levelPoint != null" >
        level_point = #{levelPoint,jdbcType=VARCHAR},
      </if>
      <if test="rank != null" >
        rank = #{rank,jdbcType=INTEGER},
      </if>
      <if test="unpassedReasonCode != null" >
        unpassed_reason_code = #{unpassedReasonCode,jdbcType=VARCHAR},
      </if>
      <if test="unpassedReasonExplain != null" >
        unpassed_reason_explain = #{unpassedReasonExplain,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="replaceCourseNumber != null" >
        replace_course_number = #{replaceCourseNumber,jdbcType=VARCHAR},
      </if>
      <if test="retakeCourseMark != null" >
        retake_course_mark = #{retakeCourseMark,jdbcType=VARCHAR},
      </if>
      <if test="retakecourseModeCode != null" >
        retakeCourse_mode_code = #{retakecourseModeCode,jdbcType=VARCHAR},
      </if>
      <if test="retakeCourseModeExplain != null" >
        retake_course_mode_explain = #{retakeCourseModeExplain,jdbcType=VARCHAR},
      </if>
      <if test="standardPoint != null" >
        standard_point = #{standardPoint,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null" >
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hackerda.platform.pojo.UrpGrade" >
    update urp_grade
    set exam_id = #{examId,jdbcType=INTEGER},
      account = #{account,jdbcType=INTEGER},
      score = #{score,jdbcType=DOUBLE},
      grade_point = #{gradePoint,jdbcType=DOUBLE},
      level_name = #{levelName,jdbcType=VARCHAR},
      level_point = #{levelPoint,jdbcType=VARCHAR},
      rank = #{rank,jdbcType=INTEGER},
      unpassed_reason_code = #{unpassedReasonCode,jdbcType=VARCHAR},
      unpassed_reason_explain = #{unpassedReasonExplain,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      replace_course_number = #{replaceCourseNumber,jdbcType=VARCHAR},
      retake_course_mark = #{retakeCourseMark,jdbcType=VARCHAR},
      retakeCourse_mode_code = #{retakecourseModeCode,jdbcType=VARCHAR},
      retake_course_mode_explain = #{retakeCourseModeExplain,jdbcType=VARCHAR},
      standard_point = #{standardPoint,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>