<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hackerda.platform.mapper.ClassesMapper" >
    <resultMap id="ClassTimetableMap" type="com.hackerda.platform.pojo.timetable.ClassTimeTable">
        <result column="class_id" property="classId" javaType="INTEGER"/>
        <result column="time_table_id" property="timetableId" javaType="INTEGER"/>
    </resultMap>
    <resultMap id="BaseResultMap" type="com.hackerda.platform.pojo.Classes" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="academy" property="academy" jdbcType="INTEGER" />
        <result column="subject" property="subject" jdbcType="INTEGER" />
        <result column="year" property="year" jdbcType="INTEGER" />
        <result column="num" property="num" jdbcType="INTEGER" />
    </resultMap>
    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List" >
        id, name, academy, subject, year, num
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hackerda.platform.pojo.example.ClassesExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
        from classes
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from classes
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from classes
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.hackerda.platform.pojo.example.ClassesExample" >
        delete from classes
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="com.hackerda.platform.pojo.Classes" >
        insert into classes (id, name, academy,
        subject, year, num)
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{academy,jdbcType=INTEGER},
        #{subject,jdbcType=INTEGER}, #{year,jdbcType=INTEGER}, #{num,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.hackerda.platform.pojo.Classes" >
        insert into classes
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="academy != null" >
                academy,
            </if>
            <if test="subject != null" >
                subject,
            </if>
            <if test="year != null" >
                year,
            </if>
            <if test="num != null" >
                num,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="academy != null" >
                #{academy,jdbcType=INTEGER},
            </if>
            <if test="subject != null" >
                #{subject,jdbcType=INTEGER},
            </if>
            <if test="year != null" >
                #{year,jdbcType=INTEGER},
            </if>
            <if test="num != null" >
                #{num,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.hackerda.platform.pojo.example.ClassesExample" resultType="java.lang.Integer" >
        select count(*) from classes
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
        update classes
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.name != null" >
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.academy != null" >
                academy = #{record.academy,jdbcType=INTEGER},
            </if>
            <if test="record.subject != null" >
                subject = #{record.subject,jdbcType=INTEGER},
            </if>
            <if test="record.year != null" >
                year = #{record.year,jdbcType=INTEGER},
            </if>
            <if test="record.num != null" >
                num = #{record.num,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update classes
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        academy = #{record.academy,jdbcType=INTEGER},
        subject = #{record.subject,jdbcType=INTEGER},
        year = #{record.year,jdbcType=INTEGER},
        num = #{record.num,jdbcType=INTEGER}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.hackerda.platform.pojo.Classes" >
        update classes
        <set >
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="academy != null" >
                academy = #{academy,jdbcType=INTEGER},
            </if>
            <if test="subject != null" >
                subject = #{subject,jdbcType=INTEGER},
            </if>
            <if test="year != null" >
                year = #{year,jdbcType=INTEGER},
            </if>
            <if test="num != null" >
                num = #{num,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hackerda.platform.pojo.Classes" >
        update classes
        set name = #{name,jdbcType=VARCHAR},
        academy = #{academy,jdbcType=INTEGER},
        subject = #{subject,jdbcType=INTEGER},
        year = #{year,jdbcType=INTEGER},
        num = #{num,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="getClassesByTimetableIds" parameterType="java.util.List" resultMap="ClassTimetableMap">
      select class_id, time_table_id from class_timetable ct where ct.time_table_id IN
      <foreach collection="ids" item="id" open="(" close=")" separator=",">
          #{id}
      </foreach>
    </select>
    <select id="getClassesByIds" parameterType="java.util.List" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from classes
        where id IN 
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="getAllCourseTimetableIds" parameterType="int" resultType="int">
        select time_table_id
        from class_timetable where class_id = #{value}
    </select>
</mapper>