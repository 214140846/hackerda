<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hackerda.platform.infrastructure.database.mapper.StudentSettingsMapper">
  <resultMap id="BaseResultMap" type="com.hackerda.platform.infrastructure.database.model.StudentSettings">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="grade_push_switch" jdbcType="BOOLEAN" property="gradePushSwitch" />
    <result column="course_push_switch" jdbcType="BOOLEAN" property="coursePushSwitch" />
    <result column="exam_push_switch" jdbcType="BOOLEAN" property="examPushSwitch" />
    <result column="comment_push_switch" jdbcType="BOOLEAN" property="commentPushSwitch" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modify" jdbcType="TIMESTAMP" property="gmtModify" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, account, grade_push_switch, course_push_switch, exam_push_switch, comment_push_switch, 
    gmt_create, gmt_modify
  </sql>
  <select id="selectByExample" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettingsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student_settings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student_settings
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student_settings
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettingsExample">
    delete from student_settings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettings" useGeneratedKeys="true">
    insert into student_settings (account, grade_push_switch, course_push_switch, 
      exam_push_switch, comment_push_switch, gmt_create, 
      gmt_modify)
    values (#{account,jdbcType=VARCHAR}, #{gradePushSwitch,jdbcType=BOOLEAN}, #{coursePushSwitch,jdbcType=BOOLEAN}, 
      #{examPushSwitch,jdbcType=BOOLEAN}, #{commentPushSwitch,jdbcType=BOOLEAN}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModify,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettings" useGeneratedKeys="true">
    insert into student_settings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="account != null">
        account,
      </if>
      <if test="gradePushSwitch != null">
        grade_push_switch,
      </if>
      <if test="coursePushSwitch != null">
        course_push_switch,
      </if>
      <if test="examPushSwitch != null">
        exam_push_switch,
      </if>
      <if test="commentPushSwitch != null">
        comment_push_switch,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModify != null">
        gmt_modify,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="gradePushSwitch != null">
        #{gradePushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="coursePushSwitch != null">
        #{coursePushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="examPushSwitch != null">
        #{examPushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="commentPushSwitch != null">
        #{commentPushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModify != null">
        #{gmtModify,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettingsExample" resultType="java.lang.Long">
    select count(*) from student_settings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student_settings
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.gradePushSwitch != null">
        grade_push_switch = #{record.gradePushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="record.coursePushSwitch != null">
        course_push_switch = #{record.coursePushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="record.examPushSwitch != null">
        exam_push_switch = #{record.examPushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="record.commentPushSwitch != null">
        comment_push_switch = #{record.commentPushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModify != null">
        gmt_modify = #{record.gmtModify,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student_settings
    set id = #{record.id,jdbcType=INTEGER},
      account = #{record.account,jdbcType=VARCHAR},
      grade_push_switch = #{record.gradePushSwitch,jdbcType=BOOLEAN},
      course_push_switch = #{record.coursePushSwitch,jdbcType=BOOLEAN},
      exam_push_switch = #{record.examPushSwitch,jdbcType=BOOLEAN},
      comment_push_switch = #{record.commentPushSwitch,jdbcType=BOOLEAN},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modify = #{record.gmtModify,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettings">
    update student_settings
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="gradePushSwitch != null">
        grade_push_switch = #{gradePushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="coursePushSwitch != null">
        course_push_switch = #{coursePushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="examPushSwitch != null">
        exam_push_switch = #{examPushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="commentPushSwitch != null">
        comment_push_switch = #{commentPushSwitch,jdbcType=BOOLEAN},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModify != null">
        gmt_modify = #{gmtModify,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hackerda.platform.infrastructure.database.model.StudentSettings">
    update student_settings
    set account = #{account,jdbcType=VARCHAR},
      grade_push_switch = #{gradePushSwitch,jdbcType=BOOLEAN},
      course_push_switch = #{coursePushSwitch,jdbcType=BOOLEAN},
      exam_push_switch = #{examPushSwitch,jdbcType=BOOLEAN},
      comment_push_switch = #{commentPushSwitch,jdbcType=BOOLEAN},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modify = #{gmtModify,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>